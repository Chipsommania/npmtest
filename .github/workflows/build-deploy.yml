name: Publish Packages

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]  # Specify the Node.js version
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm install

      - name: Detect changed packages
        id: detect-changes
        run: |
          # Get a list of changed files
          CHANGED_FILES=$(git diff --name-only HEAD^ HEAD)
          echo "Changed files: $CHANGED_FILES"

          # Initialize an array to hold changed packages
          CHANGED_PACKAGES=()

          # Loop through changed files and detect changed packages
          for FILE in $CHANGED_FILES; do
            if [[ $FILE == packages/*/package.json ]]; then
              PACKAGE_DIR=$(dirname "$FILE")
              CHANGED_PACKAGES+=("$PACKAGE_DIR")
            fi
          done

          # Remove duplicates from the array
          UNIQUE_CHANGED_PACKAGES=($(echo "${CHANGED_PACKAGES[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))

          echo "Changed packages: ${UNIQUE_CHANGED_PACKAGES[@]}"
          echo "::set-output name=changed-packages::${UNIQUE_CHANGED_PACKAGES[@]}"

      - name: Build and publish changed packages
        if: steps.detect-changes.outputs.changed-packages != ''
        run: |
          IFS=' ' read -r -a CHANGED_PACKAGES <<< "${{ steps.detect-changes.outputs.changed-packages }}"
          for PACKAGE in "${CHANGED_PACKAGES[@]}"; do
            echo "Building and publishing $PACKAGE"

            cd "$PACKAGE"
            npm install
            npm run build  # Adjust this if your build script is named differently

            # Publish the package to npm
            npm publish
            cd -
          done
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
